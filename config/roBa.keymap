#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                      &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G      &kp ESCAPE                       &kp SQT        &kp H      &kp J  &kp K      &kp L    &kp MINUS
&kp Z             &kp X         &kp C         &kp V                   &kp B      &mt LEFT_SHIFT TAB               &kp SEMICOLON  &kp N      &kp M  &kp COMMA  &kp DOT  &mo 1
&kp LEFT_CONTROL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 GRAVE  &kp SPACE  &lt_to_layer_0 2 INT_HENKAN      &kp BACKSPACE  &kp ENTER                             &mo 6
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                       &trans  &kp UP_ARROW    &trans           &trans  &trans
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &trans  &trans  &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans  &trans
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &trans  &trans  &kp DOWN_ARROW  &trans           &trans  &trans
&trans   &trans   &trans  &trans  &trans   &trans      &trans  &trans                                           &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                         &kp NUMBER_6  &kp N7     &kp N8        &kp N9      &kp N0
&trans        &trans        &trans        &trans        &trans  &trans      &kp EQUAL  &kp PLUS      &kp MINUS  &kp ASTERISK  &kp SLASH   &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans     &trans        &trans     &trans        &kp PERIOD  &kp BACKSLASH
&trans        &trans        &trans        &trans        &trans  &trans      &trans     &trans                                             &kp PIPE
            >;
        };

        SHIFT {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                                 &kp CARET       &kp AMPERSAND    &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans           &trans       &trans    &trans      &trans       &trans      &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp UNDERSCORE
&trans           &trans       &trans    &trans      &trans       &trans      &kp COLON          &kp TILDE       &trans           &kp LESS_THAN     &kp GREATER_THAN      &kp QUESTION
&trans           &trans       &trans    &trans      &trans       &trans      &kp PLUS           &kp EQUAL                                                                &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &mkp MB3  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans                              &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                           &trans  &trans  &trans  &trans  &bt BT_CLR
&trans          &trans        &trans        &trans        &trans        &trans      &trans       &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans      &bootloader  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans      &trans       &trans                          &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
